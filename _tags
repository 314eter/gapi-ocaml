<tools/*.ml>: syntax_camlp4o
"src/test/testMonadic.ml": syntax_camlp4o
"tools/serviceGenerator.byte": debug
# Disable warning 23 (Useless record "with" clause) for generated modules
<src/gapi/gapi*Model.ml>: warn(-x)
# Disable warning 3 (Deprecated feature), and 58 (Missing cmx file) for
# compatibility with old compilers
<src/gapi/*.ml>: warn(-d-58)
<src/gdata/*.ml>: warn(-d-58)
<tools/*.ml>: warn(-d)
# Disable warning 52 (Fragile costant pattern) for tests
<src/test/testDocumentsV3Service.ml>: warn(-52)

# OASIS_START
# DO NOT EDIT (digest: 0e6ebac24f87b5de56171c0568a0ecf9)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library gapi-ocaml
"src/gapi/gapi-ocaml.cmxs": use_gapi-ocaml
<src/gapi/*.ml{,i,y}>: package(cryptokit)
<src/gapi/*.ml{,i,y}>: package(curl)
<src/gapi/*.ml{,i,y}>: package(extlib)
<src/gapi/*.ml{,i,y}>: package(netstring)
<src/gapi/*.ml{,i,y}>: package(str)
<src/gapi/*.ml{,i,y}>: package(yojson)
# Library gdata
"src/gdata/gdata.cmxs": use_gdata
<src/gdata/*.ml{,i,y}>: package(cryptokit)
<src/gdata/*.ml{,i,y}>: package(curl)
<src/gdata/*.ml{,i,y}>: package(extlib)
<src/gdata/*.ml{,i,y}>: package(netstring)
<src/gdata/*.ml{,i,y}>: package(str)
<src/gdata/*.ml{,i,y}>: package(xmlm)
<src/gdata/*.ml{,i,y}>: package(yojson)
<src/gdata/*.ml{,i,y}>: use_gapi-ocaml
# Executable serviceGenerator
"tools/serviceGenerator.byte": package(cryptokit)
"tools/serviceGenerator.byte": package(curl)
"tools/serviceGenerator.byte": package(extlib)
"tools/serviceGenerator.byte": package(monad-custom)
"tools/serviceGenerator.byte": package(netstring)
"tools/serviceGenerator.byte": package(str)
"tools/serviceGenerator.byte": package(yojson)
"tools/serviceGenerator.byte": use_gapi-ocaml
<tools/*.ml{,i,y}>: package(cryptokit)
<tools/*.ml{,i,y}>: package(curl)
<tools/*.ml{,i,y}>: package(extlib)
<tools/*.ml{,i,y}>: package(monad-custom)
<tools/*.ml{,i,y}>: package(netstring)
<tools/*.ml{,i,y}>: package(str)
<tools/*.ml{,i,y}>: package(yojson)
<tools/*.ml{,i,y}>: use_gapi-ocaml
# Executable oauth2Flow
"examples/auth/oauth2Flow.byte": package(cryptokit)
"examples/auth/oauth2Flow.byte": package(curl)
"examples/auth/oauth2Flow.byte": package(extlib)
"examples/auth/oauth2Flow.byte": package(nethttpd)
"examples/auth/oauth2Flow.byte": package(netstring)
"examples/auth/oauth2Flow.byte": package(str)
"examples/auth/oauth2Flow.byte": package(xmlm)
"examples/auth/oauth2Flow.byte": package(yojson)
"examples/auth/oauth2Flow.byte": use_gapi-ocaml
"examples/auth/oauth2Flow.byte": use_gdata
<examples/auth/*.ml{,i,y}>: package(xmlm)
<examples/auth/*.ml{,i,y}>: use_gdata
# Executable oauth1Flow
"examples/auth/oauth1Flow.byte": package(cryptokit)
"examples/auth/oauth1Flow.byte": package(curl)
"examples/auth/oauth1Flow.byte": package(extlib)
"examples/auth/oauth1Flow.byte": package(nethttpd)
"examples/auth/oauth1Flow.byte": package(netstring)
"examples/auth/oauth1Flow.byte": package(str)
"examples/auth/oauth1Flow.byte": package(yojson)
"examples/auth/oauth1Flow.byte": use_gapi-ocaml
# Executable clientLoginFlow
"examples/auth/clientLoginFlow.byte": package(cryptokit)
"examples/auth/clientLoginFlow.byte": package(curl)
"examples/auth/clientLoginFlow.byte": package(extlib)
"examples/auth/clientLoginFlow.byte": package(nethttpd)
"examples/auth/clientLoginFlow.byte": package(netstring)
"examples/auth/clientLoginFlow.byte": package(str)
"examples/auth/clientLoginFlow.byte": package(yojson)
"examples/auth/clientLoginFlow.byte": use_gapi-ocaml
<examples/auth/*.ml{,i,y}>: package(cryptokit)
<examples/auth/*.ml{,i,y}>: package(curl)
<examples/auth/*.ml{,i,y}>: package(extlib)
<examples/auth/*.ml{,i,y}>: package(nethttpd)
<examples/auth/*.ml{,i,y}>: package(netstring)
<examples/auth/*.ml{,i,y}>: package(str)
<examples/auth/*.ml{,i,y}>: package(yojson)
<examples/auth/*.ml{,i,y}>: use_gapi-ocaml
# Executable refreshOAuth2Token
"src/test/refreshOAuth2Token.byte": package(cryptokit)
"src/test/refreshOAuth2Token.byte": package(curl)
"src/test/refreshOAuth2Token.byte": package(extlib)
"src/test/refreshOAuth2Token.byte": package(netstring)
"src/test/refreshOAuth2Token.byte": package(oUnit)
"src/test/refreshOAuth2Token.byte": package(str)
"src/test/refreshOAuth2Token.byte": package(yojson)
"src/test/refreshOAuth2Token.byte": use_gapi-ocaml
# Executable test_suite
"src/test/testSuite.byte": package(cryptokit)
"src/test/testSuite.byte": package(curl)
"src/test/testSuite.byte": package(extlib)
"src/test/testSuite.byte": package(monad-custom)
"src/test/testSuite.byte": package(netstring)
"src/test/testSuite.byte": package(oUnit)
"src/test/testSuite.byte": package(str)
"src/test/testSuite.byte": package(xmlm)
"src/test/testSuite.byte": package(yojson)
"src/test/testSuite.byte": use_gapi-ocaml
"src/test/testSuite.byte": use_gdata
<src/test/*.ml{,i,y}>: package(cryptokit)
<src/test/*.ml{,i,y}>: package(curl)
<src/test/*.ml{,i,y}>: package(extlib)
<src/test/*.ml{,i,y}>: package(monad-custom)
<src/test/*.ml{,i,y}>: package(netstring)
<src/test/*.ml{,i,y}>: package(oUnit)
<src/test/*.ml{,i,y}>: package(str)
<src/test/*.ml{,i,y}>: package(xmlm)
<src/test/*.ml{,i,y}>: package(yojson)
<src/test/*.ml{,i,y}>: use_gapi-ocaml
<src/test/*.ml{,i,y}>: use_gdata
# OASIS_STOP
